import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "@/store";
import {
  setWishlist,
  addToWishlist as add,
  removeFromWishlist as remove,
} from "@/store/slices/wishlistSlice";
import axios from "axios";
import { baseURL } from "@/baseURL";
import { AuthActions } from "@/auth/utils";
import axiosAuth from "@/auth/axiosAuth";

export const useWishlist = () => {
  const isAuth = useSelector((state: RootState) => state.auth.isLoggedIn);
  const wishlist = useSelector((state: RootState) => state.wishlist.ids);
  const dispatch = useDispatch();

  // üß† –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
  const syncWishlist = async () => {
    const local = JSON.parse(localStorage.getItem("wishlist") || "[]");

    try {
      const res = await axiosAuth.get(
        `${baseURL}tailor/wishlist-products/en/`,
        {
          withCredentials: true,
          headers: {
            Authorization: `Bearer ${AuthActions.getToken()}`,
          },
        }
      );

      console.log("üì° –ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");

      const serverIds = res.data.map((item: any) => item.id);

      // üîÅ –î–æ–±–∞–≤–∏–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Ç–∞–º –Ω–µ—Ç
      const toCreate = local.filter((id: number) => !serverIds.includes(id));
      for (const id of toCreate) {
        await axiosAuth.post(
          `${baseURL}tailor/favourite-create/`,
          { product: id },
          {
            withCredentials: true,
            headers: {
              Authorization: `Bearer ${AuthActions.getToken()}`,
            },
          }
        );
      }

      // ‚úÖ –ü–æ–ª—É—á–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ redux (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      const updatedRes = await axiosAuth.get(
        `${baseURL}tailor/wishlist-products/en/`,
        {
          withCredentials: true,
          headers: {
            Authorization: `Bearer ${AuthActions.getToken()}`,
          },
        }
      );
      const uniqueProductsMap = new Map<number, any>();
      updatedRes.data.forEach((item: any) => {
        if (!uniqueProductsMap.has(item.id)) {
          uniqueProductsMap.set(item.id, item);
        }
      });
      const uniqueProducts = Array.from(uniqueProductsMap.values());

      dispatch(setWishlist(uniqueProducts.map((item) => item.id)));

      // ‚ùå –£–¥–∞–ª–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      localStorage.removeItem("wishlist");
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", e);
    }
  };

  // üîÑ useEffect –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  // useEffect(() => {
  //   const fetchWishlist = async () => {
  //     console.log("üß™ Access Token:", AuthActions.getToken());
  //     if (isAuth && AuthActions.getToken()) {
  //       await syncWishlist();
  //     } else {
  //       const local = JSON.parse(localStorage.getItem("wishlist") || "[]");
  //       dispatch(setWishlist(local));
  //     }
  //   };

  //   fetchWishlist();
  // }, [isAuth, dispatch]);

  useEffect(() => { 
    if (!isAuth) {
      localStorage.setItem("wishlist", JSON.stringify(wishlist));
    }
  }, [wishlist, isAuth]);

  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  const toggleWishlist = async (productId: number) => {
  const inList = wishlist.includes(productId);

  if (isAuth) {
    try {
      // üß† –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
      const res = await axiosAuth.get(
        `${baseURL}tailor/wishlist-products/en/`,
        {
          withCredentials: true,
          headers: {
            Authorization: `Bearer ${AuthActions.getToken()}`,
          },
        }
      );

      console.log("üì° –ó–∞–ø—Ä–æ—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");

      // üîé –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø–æ productId
      const item = res.data.find((item: any) => item.id === productId);

      if (inList) {
        if (!item || !item.favourite_id) {
          console.warn("‚ùó favourite_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
          return;
        }

        // ‚úÖ –£–¥–∞–ª—è–µ–º –ø–æ favourite_id
        await axiosAuth.delete(
          `${baseURL}tailor/favourite-retrieve-update-delete/${item.favourite_id}/`,
          {
            withCredentials: true,
            headers: {
              Authorization: `Bearer ${AuthActions.getToken()}`,
            },
          }
        );
        dispatch(remove(productId));
      } else {
        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º
        await axiosAuth.post(
          `${baseURL}tailor/favourite-create/`,
          { product: productId },
          {
            withCredentials: true,
            headers: {
              Authorization: `Bearer ${AuthActions.getToken()}`,
            },
          }
        );
        dispatch(add(productId));
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ toggleWishlist", e);
    }
  } else {
    // –ì–æ—Å—Ç—å ‚Äî localStorage
    const local = JSON.parse(localStorage.getItem("wishlist") || "[]");
    const updated = inList
      ? local.filter((id: number) => id !== productId)
      : [...local, productId];
    localStorage.setItem("wishlist", JSON.stringify(updated));
    dispatch(setWishlist(updated));
  }
};


  // üßπ –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  // üßπ –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const removeFromWishlist = async (
    favouriteId: number | undefined,
    productId: number
  ) => {
    console.log("üß™ Access Token:", AuthActions.getToken());
    const inList = wishlist.includes(productId);
    if (!inList) return;

    if (isAuth) {
      if (!favouriteId) {
        console.warn("‚ùó –ù–µ—Ç favourite_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        return;
      }

      try {
        await axiosAuth.delete(
          `${baseURL}tailor/favourite-retrieve-update-delete/${favouriteId}/`,
          {
            withCredentials: true,
            headers: {
              Authorization: `Bearer ${AuthActions.getToken()}`,
            },
          }
        );

        dispatch(remove(productId));
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", e);
      }
    } else {
      // –ì–æ—Å—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ localStorage
      const local = JSON.parse(localStorage.getItem("wishlist") || "[]");
      const updated = local.filter((id: number) => id !== productId);
      localStorage.setItem("wishlist", JSON.stringify(updated));
      dispatch(setWishlist(updated));
    }
  };

  return {
    wishlist,
    toggleWishlist,
    removeFromWishlist,
    isInWishlist: (id: number) => wishlist.includes(id),
  };
};
